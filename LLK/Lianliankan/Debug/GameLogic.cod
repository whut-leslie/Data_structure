; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	D:\Study\数据结构与算法综合实验\连连看游戏\LLKPro17.6.18\Lianliankan\GameLogic.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?LinkInRow@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z ; CGameLogic::LinkInRow
PUBLIC	?LinkInCol@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z ; CGameLogic::LinkInCol
PUBLIC	?OneCornerLink@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z ; CGameLogic::OneCornerLink
PUBLIC	?TwoCornerLink@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z ; CGameLogic::TwoCornerLink
PUBLIC	?LineX@CGameLogic@@IAE_NPAPAHHHH@Z		; CGameLogic::LineX
PUBLIC	?LineY@CGameLogic@@IAE_NPAPAHHHH@Z		; CGameLogic::LineY
PUBLIC	?PushVertex@CGameLogic@@IAEXUtagVertex@@@Z	; CGameLogic::PushVertex
PUBLIC	?PopVertex@CGameLogic@@IAE?AUtagVertex@@XZ	; CGameLogic::PopVertex
PUBLIC	?ClearStack@CGameLogic@@IAEXXZ			; CGameLogic::ClearStack
PUBLIC	??0CGameLogic@@QAE@XZ				; CGameLogic::CGameLogic
PUBLIC	??1CGameLogic@@QAE@XZ				; CGameLogic::~CGameLogic
PUBLIC	?InitMap@CGameLogic@@QAEPAPAHXZ			; CGameLogic::InitMap
PUBLIC	?ReleaseMap@CGameLogic@@QAEXAAPAPAH@Z		; CGameLogic::ReleaseMap
PUBLIC	?RerankGraph@CGameLogic@@QAEXPAPAH@Z		; CGameLogic::RerankGraph
PUBLIC	?IsLink@CGameLogic@@QAE_NPAPAHUtagVertex@@1@Z	; CGameLogic::IsLink
PUBLIC	?Clear@CGameLogic@@QAEXPAPAHUtagVertex@@1@Z	; CGameLogic::Clear
PUBLIC	?GetVexPath@CGameLogic@@QAEHQAUtagVertex@@@Z	; CGameLogic::GetVexPath
PUBLIC	__TI2PAVCGameException@@
PUBLIC	__CTA2PAVCGameException@@
PUBLIC	??_R0PAVCGameException@@@8			; CGameException * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAVCGameException@@@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_C@_1BA@IKAAEJHO@Q?$IF?$FLXd?MO?2_?$AC?$FO8?$PP?$AB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@CPMPPCLL@n8b?$AP?$IC?$LB?$ICrN?$AOn8b?$APW0V?$POY?8?2?$APN?$ANS9?$JBM?$PP?$AB?$AA?$AA@ ; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp__srand:PROC
EXTRN	__imp__rand:PROC
EXTRN	__imp___time64:PROC
EXTRN	??0CGameException@@QAE@PA_W@Z:PROC		; CGameException::CGameException
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?s_nRows@CGameControl@@2HA:DWORD		; CGameControl::s_nRows
EXTRN	?s_nCols@CGameControl@@2HA:DWORD		; CGameControl::s_nCols
EXTRN	?s_nPicNum@CGameControl@@2HA:DWORD		; CGameControl::s_nPicNum
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_1CA@CPMPPCLL@n8b?$AP?$IC?$LB?$ICrN?$AOn8b?$APW0V?$POY?8?2?$APN?$ANS9?$JBM?$PP?$AB?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@CPMPPCLL@n8b?$AP?$IC?$LB?$ICrN?$AOn8b?$APW0V?$POY?8?2?$APN?$ANS9?$JBM?$PP?$AB?$AA?$AA@ DB '8'
	DB	'n', 0fH, 'b', 0b1H, 082H, 'r', 082H, 0eH, 'N8n', 0fH, 'b0W', 0feH
	DB	'V''Y', 0fH, '\', 0dH, 'N9SM', 091H, 01H, 0ffH, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@IKAAEJHO@Q?$IF?$FLXd?MO?2_?$AC?$FO8?$PP?$AB?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@IKAAEJHO@Q?$IF?$FLXd?MO?2_?$AC?$FO8?$PP?$AB?$AA?$AA@ DB 085H, 'Q'
	DB	'X[', 0cdH, 'd\O', 02H, '_8^', 01H, 0ffH, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAX@8
data$r	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
data$r	ENDS
;	COMDAT __CT??_R0PAVCGameException@@@84
xdata$x	SEGMENT
__CT??_R0PAVCGameException@@@84 DD 01H
	DD	FLAT:??_R0PAVCGameException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAVCGameException@@@8
data$r	SEGMENT
??_R0PAVCGameException@@@8 DD FLAT:??_7type_info@@6B@	; CGameException * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAVCGameException@@', 00H
data$r	ENDS
;	COMDAT __CTA2PAVCGameException@@
xdata$x	SEGMENT
__CTA2PAVCGameException@@ DD 02H
	DD	FLAT:__CT??_R0PAVCGameException@@@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT __TI2PAVCGameException@@
xdata$x	SEGMENT
__TI2PAVCGameException@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAVCGameException@@
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InitMap@CGameLogic@@QAEPAPAHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitMap@CGameLogic@@QAEPAPAHXZ$0
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitMap@CGameLogic@@QAEPAPAHXZ$2
__ehfuncinfo$?InitMap@CGameLogic@@QAEPAPAHXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?InitMap@CGameLogic@@QAEPAPAHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?GetVexPath@CGameLogic@@QAEHQAUtagVertex@@@Z
_TEXT	SEGMENT
_avPath$ = 8						; size = 4
?GetVexPath@CGameLogic@@QAEHQAUtagVertex@@@Z PROC	; CGameLogic::GetVexPath, COMDAT
; _this$ = ecx

; 377  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 378  : 	for (int i = 0; i < m_nVexNum; i++)

  00007	33 f6		 xor	 esi, esi
  00009	39 77 30	 cmp	 DWORD PTR [edi+48], esi
  0000c	8d 47 30	 lea	 eax, DWORD PTR [edi+48]
  0000f	7e 27		 jle	 SHORT $LN10@GetVexPath
  00011	8b 55 08	 mov	 edx, DWORD PTR _avPath$[ebp]
  00014	2b fa		 sub	 edi, edx
  00016	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@GetVexPath:

; 379  : 	{
; 380  : 		avPath[i] = m_avPath[i];

  00020	c5 fa 7e 04 17	 vmovq	 xmm0, QWORD PTR [edi+edx]
  00025	c5 f9 d6 02	 vmovq	 QWORD PTR [edx], xmm0
  00029	8b 4c 17 08	 mov	 ecx, DWORD PTR [edi+edx+8]
  0002d	8d 52 0c	 lea	 edx, DWORD PTR [edx+12]
  00030	89 4a fc	 mov	 DWORD PTR [edx-4], ecx
  00033	46		 inc	 esi
  00034	3b 30		 cmp	 esi, DWORD PTR [eax]
  00036	7c e8		 jl	 SHORT $LL4@GetVexPath
$LN10@GetVexPath:

; 381  : 	}
; 382  : 	return m_nVexNum;

  00038	8b 00		 mov	 eax, DWORD PTR [eax]
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi

; 383  : }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?GetVexPath@CGameLogic@@QAEHQAUtagVertex@@@Z ENDP	; CGameLogic::GetVexPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?Clear@CGameLogic@@QAEXPAPAHUtagVertex@@1@Z
_TEXT	SEGMENT
_pGameMap$ = 8						; size = 4
_v1$ = 12						; size = 12
_v2$ = 24						; size = 12
?Clear@CGameLogic@@QAEXPAPAHUtagVertex@@1@Z PROC	; CGameLogic::Clear, COMDAT
; _this$ = ecx

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 371  : 	pGameMap[v1.row][v1.col] = BLANK;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR _pGameMap$[ebp]
  00009	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  0000c	8b 45 10	 mov	 eax, DWORD PTR _v1$[ebp+4]
  0000f	c7 04 81 ff ff
	ff ff		 mov	 DWORD PTR [ecx+eax*4], -1

; 372  : 	pGameMap[v2.row][v2.col] = BLANK;

  00016	8b 45 18	 mov	 eax, DWORD PTR _v2$[ebp]
  00019	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  0001c	8b 45 1c	 mov	 eax, DWORD PTR _v2$[ebp+4]
  0001f	c7 04 81 ff ff
	ff ff		 mov	 DWORD PTR [ecx+eax*4], -1

; 373  : }

  00026	5d		 pop	 ebp
  00027	c2 1c 00	 ret	 28			; 0000001cH
?Clear@CGameLogic@@QAEXPAPAHUtagVertex@@1@Z ENDP	; CGameLogic::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?IsLink@CGameLogic@@QAE_NPAPAHUtagVertex@@1@Z
_TEXT	SEGMENT
_pGameMap$ = 8						; size = 4
_v1$ = 12						; size = 12
_v2$ = 24						; size = 12
?IsLink@CGameLogic@@QAE_NPAPAHUtagVertex@@1@Z PROC	; CGameLogic::IsLink, COMDAT
; _this$ = ecx

; 337  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 338  : 	ClearStack();	// 清空栈

  00008	e8 00 00 00 00	 call	 ?ClearStack@CGameLogic@@IAEXXZ ; CGameLogic::ClearStack

; 142  : 	if(m_nVexNum <= PathLen)

  0000d	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00010	83 f8 04	 cmp	 eax, 4
  00013	7f 18		 jg	 SHORT $LN17@IsLink

; 143  : 		m_avPath[m_nVexNum++] = v;

  00015	c5 fa 7e 45 0c	 vmovq	 xmm0, QWORD PTR _v1$[ebp]
  0001a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0001d	8d 0c 86	 lea	 ecx, DWORD PTR [esi+eax*4]
  00020	c5 f9 d6 01	 vmovq	 QWORD PTR [ecx], xmm0
  00024	8b 45 14	 mov	 eax, DWORD PTR _v1$[ebp+8]
  00027	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0002a	ff 46 30	 inc	 DWORD PTR [esi+48]
$LN17@IsLink:

; 339  : 	PushVertex(v1);
; 340  : 
; 341  : 	bool isLink = false;
; 342  : 	if (v1.row == v2.row)

  0002d	8b 7d 0c	 mov	 edi, DWORD PTR _v1$[ebp]
  00030	32 db		 xor	 bl, bl

; 172  : 	int nCol1 = v1.col; 

  00032	8b 45 10	 mov	 eax, DWORD PTR _v1$[ebp+4]

; 339  : 	PushVertex(v1);
; 340  : 
; 341  : 	bool isLink = false;
; 342  : 	if (v1.row == v2.row)

  00035	3b 7d 18	 cmp	 edi, DWORD PTR _v2$[ebp]
  00038	75 6a		 jne	 SHORT $LN2@IsLink

; 173  : 	int nCol2 = v2.col; 

  0003a	8b 55 1c	 mov	 edx, DWORD PTR _v2$[ebp+4]
  0003d	8b c8		 mov	 ecx, eax

; 174  : 	int nRow = v1.row;
; 175  : 	//如果两元素处在边缘行，则可以直接消除，无需判断是否可以直通
; 176  : 	//if (nRow == 0 || nRow == CGameControl::s_nRows-1)
; 177  : 		//return true;
; 178  : 	//保证 nCol1 的值小于 nCol2 
; 179  : 	if(nCol1 > nCol2) 

  0003f	3b c2		 cmp	 eax, edx
  00041	7e 04		 jle	 SHORT $LN23@IsLink

; 180  : 	{   //数据交换   
; 181  : 		int nTemp = nCol1;   
; 182  : 		nCol1 = nCol2;  

  00043	8b ca		 mov	 ecx, edx

; 183  : 		nCol2 = nTemp; 

  00045	8b d0		 mov	 edx, eax
$LN23@IsLink:

; 184  : 	} 
; 185  : 	 //直通   
; 186  : 	for(int i = nCol1 + 1; i <= nCol2; i++)  

  00047	41		 inc	 ecx
  00048	3b ca		 cmp	 ecx, edx
  0004a	7f 17		 jg	 SHORT $LN4@IsLink
$LN39@IsLink:

; 187  : 	{  
; 188  : 		if(i == nCol2) 

  0004c	0f 84 fa 00 00
	00		 je	 $LN36@IsLink

; 189  : 			return true;  
; 190  : 		if(pGameMap[nRow][i] != BLANK)  

  00052	8b 45 08	 mov	 eax, DWORD PTR _pGameMap$[ebp]
  00055	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00058	83 3c 88 ff	 cmp	 DWORD PTR [eax+ecx*4], -1
  0005c	75 05		 jne	 SHORT $LN4@IsLink

; 184  : 	} 
; 185  : 	 //直通   
; 186  : 	for(int i = nCol1 + 1; i <= nCol2; i++)  

  0005e	41		 inc	 ecx
  0005f	3b ca		 cmp	 ecx, edx
  00061	7e e9		 jle	 SHORT $LN39@IsLink
$LN4@IsLink:

; 343  : 	{
; 344  : 		if (LinkInRow(pGameMap, v1, v2))  // X 直连方式  
; 345  : 			isLink = true;
; 346  : 		else if (TwoCornerLink(pGameMap, v1, v2))

  00063	c5 fa 7e 45 18	 vmovq	 xmm0, QWORD PTR _v2$[ebp]
  00068	8b 45 20	 mov	 eax, DWORD PTR _v2$[ebp+8]
  0006b	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0006e	8b cc		 mov	 ecx, esp
  00070	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00073	c5 f9 d6 01	 vmovq	 QWORD PTR [ecx], xmm0
  00077	c5 fa 7e 45 0c	 vmovq	 xmm0, QWORD PTR _v1$[ebp]
  0007c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0007f	8b cc		 mov	 ecx, esp
  00081	8b 45 14	 mov	 eax, DWORD PTR _v1$[ebp+8]
  00084	ff 75 08	 push	 DWORD PTR _pGameMap$[ebp]
  00087	c5 f9 d6 01	 vmovq	 QWORD PTR [ecx], xmm0
  0008b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0008e	8b ce		 mov	 ecx, esi
  00090	e8 00 00 00 00	 call	 ?TwoCornerLink@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z ; CGameLogic::TwoCornerLink
  00095	84 c0		 test	 al, al
  00097	0f 84 f0 00 00
	00		 je	 $LN14@IsLink

; 347  : 			isLink = true;

  0009d	b3 01		 mov	 bl, 1

; 348  : 	}

  0009f	e9 e9 00 00 00	 jmp	 $LN14@IsLink
$LN2@IsLink:

; 349  : 	else if (v1.col == v2.col)  // Y 直连方式 
; 350  : 	{
; 351  : 		if (LinkInCol(pGameMap, v1, v2))

  000a4	c5 fa 7e 45 18	 vmovq	 xmm0, QWORD PTR _v2$[ebp]
  000a9	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000ac	3b 45 1c	 cmp	 eax, DWORD PTR _v2$[ebp+4]
  000af	75 6c		 jne	 SHORT $LN7@IsLink
  000b1	8b 7d 20	 mov	 edi, DWORD PTR _v2$[ebp+8]
  000b4	8b c4		 mov	 eax, esp
  000b6	8b 4d 14	 mov	 ecx, DWORD PTR _v1$[ebp+8]
  000b9	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000bc	c5 f9 d6 00	 vmovq	 QWORD PTR [eax], xmm0
  000c0	c5 fa 7e 45 0c	 vmovq	 xmm0, QWORD PTR _v1$[ebp]
  000c5	89 78 08	 mov	 DWORD PTR [eax+8], edi
  000c8	8b c4		 mov	 eax, esp
  000ca	ff 75 08	 push	 DWORD PTR _pGameMap$[ebp]
  000cd	c5 f9 d6 00	 vmovq	 QWORD PTR [eax], xmm0
  000d1	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000d4	8b ce		 mov	 ecx, esi
  000d6	e8 00 00 00 00	 call	 ?LinkInCol@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z ; CGameLogic::LinkInCol
  000db	84 c0		 test	 al, al
  000dd	74 07		 je	 SHORT $LN9@IsLink

; 352  : 			isLink = true;

  000df	b3 01		 mov	 bl, 1
  000e1	e9 a7 00 00 00	 jmp	 $LN14@IsLink
$LN9@IsLink:

; 353  : 		else if (TwoCornerLink(pGameMap, v1, v2))

  000e6	c5 fa 7e 45 18	 vmovq	 xmm0, QWORD PTR _v2$[ebp]
  000eb	8b 4d 14	 mov	 ecx, DWORD PTR _v1$[ebp+8]
  000ee	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000f1	8b c4		 mov	 eax, esp
  000f3	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000f6	c5 f9 d6 00	 vmovq	 QWORD PTR [eax], xmm0
  000fa	c5 fa 7e 45 0c	 vmovq	 xmm0, QWORD PTR _v1$[ebp]
  000ff	89 78 08	 mov	 DWORD PTR [eax+8], edi
  00102	8b c4		 mov	 eax, esp
  00104	ff 75 08	 push	 DWORD PTR _pGameMap$[ebp]
  00107	c5 f9 d6 00	 vmovq	 QWORD PTR [eax], xmm0
  0010b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0010e	8b ce		 mov	 ecx, esi
  00110	e8 00 00 00 00	 call	 ?TwoCornerLink@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z ; CGameLogic::TwoCornerLink
  00115	84 c0		 test	 al, al
  00117	74 74		 je	 SHORT $LN14@IsLink

; 354  : 			isLink = true;

  00119	b3 01		 mov	 bl, 1

; 355  : 	}

  0011b	eb 70		 jmp	 SHORT $LN14@IsLink
$LN7@IsLink:

; 356  : 	else if (OneCornerLink(pGameMap, v1, v2))   //一拐点，2条线

  0011d	8b 45 20	 mov	 eax, DWORD PTR _v2$[ebp+8]
  00120	8b cc		 mov	 ecx, esp
  00122	8b 7d 08	 mov	 edi, DWORD PTR _pGameMap$[ebp]
  00125	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00128	c5 f9 d6 01	 vmovq	 QWORD PTR [ecx], xmm0
  0012c	c5 fa 7e 45 0c	 vmovq	 xmm0, QWORD PTR _v1$[ebp]
  00131	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00134	8b cc		 mov	 ecx, esp
  00136	8b 45 14	 mov	 eax, DWORD PTR _v1$[ebp+8]
  00139	57		 push	 edi
  0013a	c5 f9 d6 01	 vmovq	 QWORD PTR [ecx], xmm0
  0013e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00141	8b ce		 mov	 ecx, esi
  00143	e8 00 00 00 00	 call	 ?OneCornerLink@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z ; CGameLogic::OneCornerLink
  00148	84 c0		 test	 al, al
  0014a	74 04		 je	 SHORT $LN12@IsLink
$LN36@IsLink:

; 357  : 	{
; 358  : 		isLink = true;

  0014c	b3 01		 mov	 bl, 1
  0014e	eb 3d		 jmp	 SHORT $LN14@IsLink
$LN12@IsLink:

; 359  : 	}
; 360  : 	else if (TwoCornerLink(pGameMap, v1, v2))   //2拐点，3条线

  00150	c5 fa 7e 45 18	 vmovq	 xmm0, QWORD PTR _v2$[ebp]
  00155	8b 45 20	 mov	 eax, DWORD PTR _v2$[ebp+8]
  00158	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0015b	8b cc		 mov	 ecx, esp
  0015d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00160	c5 f9 d6 01	 vmovq	 QWORD PTR [ecx], xmm0
  00164	c5 fa 7e 45 0c	 vmovq	 xmm0, QWORD PTR _v1$[ebp]
  00169	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0016c	8b cc		 mov	 ecx, esp
  0016e	8b 45 14	 mov	 eax, DWORD PTR _v1$[ebp+8]
  00171	57		 push	 edi
  00172	c5 f9 d6 01	 vmovq	 QWORD PTR [ecx], xmm0
  00176	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00179	8b ce		 mov	 ecx, esi
  0017b	e8 00 00 00 00	 call	 ?TwoCornerLink@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z ; CGameLogic::TwoCornerLink
  00180	84 c0		 test	 al, al
  00182	0f b6 db	 movzx	 ebx, bl
  00185	b9 01 00 00 00	 mov	 ecx, 1
  0018a	0f 45 d9	 cmovne	 ebx, ecx
$LN14@IsLink:

; 142  : 	if(m_nVexNum <= PathLen)

  0018d	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00190	83 f8 04	 cmp	 eax, 4
  00193	7f 18		 jg	 SHORT $LN37@IsLink

; 143  : 		m_avPath[m_nVexNum++] = v;

  00195	c5 fa 7e 45 18	 vmovq	 xmm0, QWORD PTR _v2$[ebp]
  0019a	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0019d	8d 14 8e	 lea	 edx, DWORD PTR [esi+ecx*4]
  001a0	c5 f9 d6 02	 vmovq	 QWORD PTR [edx], xmm0
  001a4	8b 4d 20	 mov	 ecx, DWORD PTR _v2$[ebp+8]
  001a7	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  001aa	ff 46 30	 inc	 DWORD PTR [esi+48]
$LN37@IsLink:

; 361  : 	{
; 362  : 		isLink = true;
; 363  : 	}
; 364  : 	PushVertex(v2);
; 365  : 	return isLink;
; 366  : }

  001ad	5f		 pop	 edi
  001ae	5e		 pop	 esi
  001af	8a c3		 mov	 al, bl
  001b1	5b		 pop	 ebx
  001b2	5d		 pop	 ebp
  001b3	c2 1c 00	 ret	 28			; 0000001cH
?IsLink@CGameLogic@@QAE_NPAPAHUtagVertex@@1@Z ENDP	; CGameLogic::IsLink
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?RerankGraph@CGameLogic@@QAEXPAPAH@Z
_TEXT	SEGMENT
_nCols$1$ = -12						; size = 4
_x1$1$ = -8						; size = 4
tv162 = -4						; size = 4
_pGameMap$ = 8						; size = 4
?RerankGraph@CGameLogic@@QAEXPAPAH@Z PROC		; CGameLogic::RerankGraph, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 103  : 	int nCols = CGameControl::s_nCols;

  00007	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?s_nCols@CGameControl@@2HA ; CGameControl::s_nCols
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?s_nRows@CGameControl@@2HA ; CGameControl::s_nRows
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00015	6a 00		 push	 0
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp

; 103  : 	int nCols = CGameControl::s_nCols;

  00017	89 5d f4	 mov	 DWORD PTR _nCols$1$[ebp], ebx
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp

; 107  : 	srand((int)time(NULL));   // 设置种子  

  00020	50		 push	 eax
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__srand

; 108  : 
; 109  : 	// 随机任意交换两个数字  
; 110  : 	int nVertexNum = nRows * nCols;

  00027	8b f3		 mov	 esi, ebx
  00029	c7 45 fc 64 00
	00 00		 mov	 DWORD PTR tv162[ebp], 100 ; 00000064H
  00030	83 c4 08	 add	 esp, 8
  00033	0f af f7	 imul	 esi, edi
$LL4@RerankGrap:

; 111  : 	for (int i = 0; i < 100; i++)     //交换100次
; 112  : 	{
; 113  : 		int x1, y1, x2, y2;     //x,y坐标
; 114  : 		/*
; 115  : 		do {
; 116  : 			// 随机得到第一个坐标  
; 117  : 			int nIndex1 = rand() % nVertexNum;
; 118  : 			x1 = nIndex1 / nCols; y1 = nIndex1 % nCols;
; 119  : 		} while (pGameMap[x1][y1] != BLANK);   //直到第一个元素数据不为空
; 120  : 		
; 121  : 		do {
; 122  : 			// 随机得到第二个坐标  
; 123  : 			int nIndex2 = rand() % nVertexNum;
; 124  : 			x2 = nIndex2 / nCols; y2 = nIndex2 % nCols;
; 125  : 		} while (pGameMap[x2][y2] != BLANK);	//直到第二个元素数据不为空
; 126  : 		*/
; 127  : 		//随机生成2个地图元素坐标
; 128  : 		int nIndex1 = rand() % nVertexNum;

  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0003c	99		 cdq
  0003d	f7 fe		 idiv	 esi
  0003f	8b fa		 mov	 edi, edx

; 129  : 		int nIndex2 = rand() % nVertexNum;

  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00047	99		 cdq
  00048	f7 fe		 idiv	 esi

; 130  : 		x1 = nIndex1 / nCols + 1; y1 = nIndex1 % nCols + 1;

  0004a	8b c7		 mov	 eax, edi
  0004c	8b ca		 mov	 ecx, edx
  0004e	99		 cdq
  0004f	f7 fb		 idiv	 ebx
  00051	40		 inc	 eax
  00052	89 45 f8	 mov	 DWORD PTR _x1$1$[ebp], eax

; 131  : 		x2 = nIndex2 / nCols + 1; y2 = nIndex2 % nCols + 1;

  00055	8b c1		 mov	 eax, ecx
  00057	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
  0005a	99		 cdq
  0005b	f7 fb		 idiv	 ebx
  0005d	83 6d fc 01	 sub	 DWORD PTR tv162[ebp], 1
  00061	8b da		 mov	 ebx, edx

; 132  : 
; 133  : 		int nTmp = pGameMap[x1][y1];

  00063	8b 55 08	 mov	 edx, DWORD PTR _pGameMap$[ebp]
  00066	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00069	8b 45 f8	 mov	 eax, DWORD PTR _x1$1$[ebp]
  0006c	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0006f	8b 14 b8	 mov	 edx, DWORD PTR [eax+edi*4]
  00072	8d 3c b8	 lea	 edi, DWORD PTR [eax+edi*4]

; 134  : 		pGameMap[x1][y1] = pGameMap[x2][y2];

  00075	8b 45 08	 mov	 eax, DWORD PTR _pGameMap$[ebp]
  00078	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0007b	8b 44 98 04	 mov	 eax, DWORD PTR [eax+ebx*4+4]
  0007f	89 07		 mov	 DWORD PTR [edi], eax

; 135  : 		pGameMap[x2][y2] = nTmp;

  00081	8b 45 08	 mov	 eax, DWORD PTR _pGameMap$[ebp]
  00084	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00087	89 54 98 04	 mov	 DWORD PTR [eax+ebx*4+4], edx
  0008b	8b 5d f4	 mov	 ebx, DWORD PTR _nCols$1$[ebp]
  0008e	75 a6		 jne	 SHORT $LL4@RerankGrap
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx

; 136  : 	}
; 137  : }

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
?RerankGraph@CGameLogic@@QAEXPAPAH@Z ENDP		; CGameLogic::RerankGraph
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?ReleaseMap@CGameLogic@@QAEXAAPAPAH@Z
_TEXT	SEGMENT
_pGameMap$ = 8						; size = 4
?ReleaseMap@CGameLogic@@QAEXAAPAPAH@Z PROC		; CGameLogic::ReleaseMap, COMDAT
; _this$ = ecx

; 88   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   : 	for (int i = 0; i < CGameControl::s_nRows + 2; i++) 

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_nRows@CGameControl@@2HA ; CGameControl::s_nRows
  00008	56		 push	 esi
  00009	83 c0 02	 add	 eax, 2
  0000c	33 f6		 xor	 esi, esi
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _pGameMap$[ebp]
  00012	85 c0		 test	 eax, eax
  00014	7e 1a		 jle	 SHORT $LN3@ReleaseMap
$LL4@ReleaseMap:

; 90   : 	{ 
; 91   : 			delete[] pGameMap[i]; 

  00016	8b 07		 mov	 eax, DWORD PTR [edi]
  00018	ff 34 b0	 push	 DWORD PTR [eax+esi*4]
  0001b	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_nRows@CGameControl@@2HA ; CGameControl::s_nRows
  00025	46		 inc	 esi
  00026	83 c0 02	 add	 eax, 2
  00029	83 c4 04	 add	 esp, 4
  0002c	3b f0		 cmp	 esi, eax
  0002e	7c e6		 jl	 SHORT $LL4@ReleaseMap
$LN3@ReleaseMap:

; 92   : 	} 
; 93   : 	delete[] pGameMap;

  00030	8b 37		 mov	 esi, DWORD PTR [edi]
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00038	83 c4 04	 add	 esp, 4
  0003b	85 f6		 test	 esi, esi
  0003d	74 06		 je	 SHORT $LN7@ReleaseMap
  0003f	c7 07 23 81 00
	00		 mov	 DWORD PTR [edi], 33059	; 00008123H
$LN7@ReleaseMap:
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 94   : 	
; 95   : 	//delete pGameMap;
; 96   : }

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?ReleaseMap@CGameLogic@@QAEXAAPAPAH@Z ENDP		; CGameLogic::ReleaseMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?InitMap@CGameLogic@@QAEPAPAHXZ
_TEXT	SEGMENT
_nRepeatNum$1$ = -36					; size = 4
_nRows$1$ = -36						; size = 4
$T2 = -36						; size = 4
$T3 = -36						; size = 4
tv415 = -32						; size = 4
$T4 = -32						; size = 4
tv413 = -28						; size = 4
_nVertexNum$1$ = -24					; size = 4
tv416 = -24						; size = 4
$T5 = -24						; size = 4
_nPicNum$1$ = -20					; size = 4
tv422 = -20						; size = 4
_nCols$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?InitMap@CGameLogic@@QAEPAPAHXZ PROC			; CGameLogic::InitMap, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InitMap@CGameLogic@@QAEPAPAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 24   : 	// 获取地图大小和花色  
; 25   : 	int nRows = CGameControl::s_nRows; 

  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?s_nRows@CGameControl@@2HA ; CGameControl::s_nRows

; 26   : 	int nCols = CGameControl::s_nCols;  
; 27   : 	int nPicNum = CGameControl::s_nPicNum; 
; 28   : 
; 29   : 	// 游戏地图开辟内存空间   
; 30   : 	int** pGameMap = new int*[nRows + 2];  

  0002e	ba 04 00 00 00	 mov	 edx, 4
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_nPicNum@CGameControl@@2HA ; CGameControl::s_nPicNum
  00038	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?s_nCols@CGameControl@@2HA ; CGameControl::s_nCols
  0003e	89 4d dc	 mov	 DWORD PTR _nRows$1$[ebp], ecx
  00041	89 45 ec	 mov	 DWORD PTR _nPicNum$1$[ebp], eax
  00044	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  00047	33 c9		 xor	 ecx, ecx
  00049	89 45 e8	 mov	 DWORD PTR tv416[ebp], eax
  0004c	f7 e2		 mul	 edx
  0004e	89 75 f0	 mov	 DWORD PTR _nCols$1$[ebp], esi
  00051	0f 90 c1	 seto	 cl
  00054	f7 d9		 neg	 ecx
  00056	0b c8		 or	 ecx, eax
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0005e	8b d8		 mov	 ebx, eax
  00060	83 c4 04	 add	 esp, 4

; 31   : 	if(NULL == pGameMap)  

  00063	85 db		 test	 ebx, ebx
  00065	75 3c		 jne	 SHORT $LN14@InitMap

; 32   : 	{   
; 33   : 		throw new CGameException(_T("内存操作异常！"));  

  00067	6a 04		 push	 4
  00069	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006e	83 c4 04	 add	 esp, 4
  00071	89 45 dc	 mov	 DWORD PTR $T3[ebp], eax
  00074	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00077	85 c0		 test	 eax, eax
  00079	74 0e		 je	 SHORT $LN19@InitMap
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_1BA@IKAAEJHO@Q?$IF?$FLXd?MO?2_?$AC?$FO8?$PP?$AB?$AA?$AA@
  00080	8b c8		 mov	 ecx, eax
  00082	e8 00 00 00 00	 call	 ??0CGameException@@QAE@PA_W@Z ; CGameException::CGameException
  00087	eb 02		 jmp	 SHORT $LN20@InitMap
$LN19@InitMap:
  00089	33 c0		 xor	 eax, eax
$LN20@InitMap:
  0008b	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax
  0008e	8d 45 e8	 lea	 eax, DWORD PTR $T5[ebp]
  00091	68 00 00 00 00	 push	 OFFSET __TI2PAVCGameException@@
  00096	50		 push	 eax
  00097	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN60@InitMap:
$LN14@InitMap:

; 34   : 	} 
; 35   : 	else  
; 36   : 	{
; 37   : 		for (int i = 0; i < nRows + 2; i++)   

  000a3	33 ff		 xor	 edi, edi
  000a5	39 7d e8	 cmp	 DWORD PTR tv416[ebp], edi
  000a8	7e 48		 jle	 SHORT $LN3@InitMap
  000aa	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  000ad	8b 75 e8	 mov	 esi, DWORD PTR tv416[ebp]
  000b0	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  000b7	89 45 e0	 mov	 DWORD PTR tv415[ebp], eax
  000ba	89 4d e4	 mov	 DWORD PTR tv413[ebp], ecx
  000bd	0f 1f 00	 npad	 3
$LL4@InitMap:

; 38   : 		{    
; 39   : 			pGameMap[i] = new int[nCols + 2]; 

  000c0	33 c9		 xor	 ecx, ecx
  000c2	ba 04 00 00 00	 mov	 edx, 4
  000c7	f7 e2		 mul	 edx
  000c9	0f 90 c1	 seto	 cl
  000cc	f7 d9		 neg	 ecx
  000ce	0b c8		 or	 ecx, eax
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 40   : 			if(NULL == pGameMap) 
; 41   : 			{     
; 42   : 				throw new CGameException(_T("内存操作异常！"));   
; 43   : 			}   
; 44   : 			memset(pGameMap[i], BLANK, sizeof(int) * (nCols + 2));  //初始化数组为BLANK(-1)

  000d6	ff 75 e4	 push	 DWORD PTR tv413[ebp]
  000d9	89 04 bb	 mov	 DWORD PTR [ebx+edi*4], eax
  000dc	6a ff		 push	 -1
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 _memset
  000e4	8b 45 e0	 mov	 eax, DWORD PTR tv415[ebp]
  000e7	47		 inc	 edi
  000e8	83 c4 10	 add	 esp, 16			; 00000010H
  000eb	3b fe		 cmp	 edi, esi
  000ed	7c d1		 jl	 SHORT $LL4@InitMap
  000ef	8b 75 f0	 mov	 esi, DWORD PTR _nCols$1$[ebp]
$LN3@InitMap:

; 45   : 		}  
; 46   : 	}
; 47   : 	
; 48   : 	// 多少花色, 根据花色的种类计算出每种花色的图片的平均个数，依次给数组赋值。   
; 49   : 	if ((nRows * nCols) % (nPicNum * 2) != 0)  

  000f2	0f af 75 dc	 imul	 esi, DWORD PTR _nRows$1$[ebp]
  000f6	8b 7d ec	 mov	 edi, DWORD PTR _nPicNum$1$[ebp]
  000f9	8b c6		 mov	 eax, esi
  000fb	89 75 e8	 mov	 DWORD PTR _nVertexNum$1$[ebp], esi
  000fe	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  00101	99		 cdq
  00102	f7 f9		 idiv	 ecx
  00104	85 d2		 test	 edx, edx
  00106	74 6c		 je	 SHORT $LN17@InitMap

; 89   : 	for (int i = 0; i < CGameControl::s_nRows + 2; i++) 

  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_nRows@CGameControl@@2HA ; CGameControl::s_nRows
  0010d	33 f6		 xor	 esi, esi
  0010f	83 c0 02	 add	 eax, 2
  00112	85 c0		 test	 eax, eax
  00114	7e 18		 jle	 SHORT $LN30@InitMap
$LL31@InitMap:

; 90   : 	{ 
; 91   : 			delete[] pGameMap[i]; 

  00116	ff 34 b3	 push	 DWORD PTR [ebx+esi*4]
  00119	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0011e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_nRows@CGameControl@@2HA ; CGameControl::s_nRows
  00123	46		 inc	 esi
  00124	83 c0 02	 add	 eax, 2
  00127	83 c4 04	 add	 esp, 4
  0012a	3b f0		 cmp	 esi, eax
  0012c	7c e8		 jl	 SHORT $LL31@InitMap
$LN30@InitMap:

; 92   : 	} 
; 93   : 	delete[] pGameMap;

  0012e	53		 push	 ebx
  0012f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 50   : 	{  
; 51   : 		ReleaseMap(pGameMap);   
; 52   : 		throw new CGameException(_T("游戏花色与游戏地图大小不匹配！"));

  00134	6a 04		 push	 4
  00136	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0013b	83 c4 08	 add	 esp, 8
  0013e	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
  00141	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00148	85 c0		 test	 eax, eax
  0014a	74 0e		 je	 SHORT $LN23@InitMap
  0014c	68 00 00 00 00	 push	 OFFSET ??_C@_1CA@CPMPPCLL@n8b?$AP?$IC?$LB?$ICrN?$AOn8b?$APW0V?$POY?8?2?$APN?$ANS9?$JBM?$PP?$AB?$AA?$AA@
  00151	8b c8		 mov	 ecx, eax
  00153	e8 00 00 00 00	 call	 ??0CGameException@@QAE@PA_W@Z ; CGameException::CGameException
  00158	eb 02		 jmp	 SHORT $LN24@InitMap
$LN23@InitMap:
  0015a	33 c0		 xor	 eax, eax
$LN24@InitMap:
  0015c	89 45 e0	 mov	 DWORD PTR $T4[ebp], eax
  0015f	8d 45 e0	 lea	 eax, DWORD PTR $T4[ebp]
  00162	68 00 00 00 00	 push	 OFFSET __TI2PAVCGameException@@
  00167	50		 push	 eax
  00168	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0016f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN61@InitMap:
$LN17@InitMap:

; 53   : 	}  
; 54   : 	int nRepeatNum = nRows * nCols / nPicNum;

  00174	8b c6		 mov	 eax, esi

; 55   : 	int nCount = 0; 

  00176	33 c9		 xor	 ecx, ecx
  00178	99		 cdq
  00179	f7 ff		 idiv	 edi

; 56   : 	for(int i = 0; i < nPicNum; i++) 

  0017b	8b 55 ec	 mov	 edx, DWORD PTR _nPicNum$1$[ebp]
  0017e	33 ff		 xor	 edi, edi
  00180	89 45 dc	 mov	 DWORD PTR _nRepeatNum$1$[ebp], eax
  00183	85 d2		 test	 edx, edx
  00185	7e 2b		 jle	 SHORT $LN6@InitMap
$LL7@InitMap:

; 57   : 	{   
; 58   : 		for(int j = 0; j < nRepeatNum; j++)  // 重复数

  00187	85 c0		 test	 eax, eax
  00189	7e 1f		 jle	 SHORT $LN5@InitMap
  0018b	8b f0		 mov	 esi, eax
  0018d	0f 1f 00	 npad	 3
$LL10@InitMap:

; 59   : 		{    
; 60   : 			pGameMap[nCount / nCols + 1][nCount % nCols + 1] = i;   

  00190	8b c1		 mov	 eax, ecx

; 61   : 			nCount++; 

  00192	41		 inc	 ecx
  00193	99		 cdq
  00194	f7 7d f0	 idiv	 DWORD PTR _nCols$1$[ebp]
  00197	8b 44 83 04	 mov	 eax, DWORD PTR [ebx+eax*4+4]
  0019b	89 7c 90 04	 mov	 DWORD PTR [eax+edx*4+4], edi
  0019f	83 ee 01	 sub	 esi, 1
  001a2	75 ec		 jne	 SHORT $LL10@InitMap
  001a4	8b 45 dc	 mov	 eax, DWORD PTR _nRepeatNum$1$[ebp]
  001a7	8b 55 ec	 mov	 edx, DWORD PTR _nPicNum$1$[ebp]
$LN5@InitMap:

; 56   : 	for(int i = 0; i < nPicNum; i++) 

  001aa	47		 inc	 edi
  001ab	3b fa		 cmp	 edi, edx
  001ad	7c d8		 jl	 SHORT $LL7@InitMap
  001af	8b 75 e8	 mov	 esi, DWORD PTR _nVertexNum$1$[ebp]
$LN6@InitMap:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  001b2	6a 00		 push	 0
  001b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp

; 67   : 	srand((int)time(NULL));   // 设置种子  

  001ba	50		 push	 eax
  001bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__srand
  001c1	83 c4 08	 add	 esp, 8

; 68   : 
; 69   : 	// 随机任意交换两个数字  
; 70   : 	int nVertexNum = nRows * nCols;  
; 71   : 	for(int i = 0; i < nVertexNum; i++)  

  001c4	85 f6		 test	 esi, esi
  001c6	7e 51		 jle	 SHORT $LN12@InitMap
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  001c8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__rand
  001ce	89 75 ec	 mov	 DWORD PTR tv422[ebp], esi
$LL13@InitMap:
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp

; 74   : 		int nIndex1 = rand() % nVertexNum; 

  001d1	ff d7		 call	 edi
  001d3	99		 cdq
  001d4	f7 fe		 idiv	 esi
  001d6	8b f2		 mov	 esi, edx

; 75   : 	    int nIndex2 = rand() % nVertexNum;

  001d8	ff d7		 call	 edi
  001da	99		 cdq
  001db	f7 7d e8	 idiv	 DWORD PTR _nVertexNum$1$[ebp]

; 76   : 
; 77   : 		// 交换两个数值   
; 78   : 		int nTmp = pGameMap[nIndex1 / nCols + 1][nIndex1 % nCols + 1];   

  001de	8b c6		 mov	 eax, esi
  001e0	8b ca		 mov	 ecx, edx
  001e2	99		 cdq
  001e3	f7 7d f0	 idiv	 DWORD PTR _nCols$1$[ebp]
  001e6	8b 44 83 04	 mov	 eax, DWORD PTR [ebx+eax*4+4]
  001ea	8d 34 90	 lea	 esi, DWORD PTR [eax+edx*4]

; 79   : 		pGameMap[nIndex1 / nCols + 1][nIndex1 % nCols + 1] = pGameMap[nIndex2 / nCols + 1][nIndex2 % nCols + 1];  

  001ed	8b c1		 mov	 eax, ecx
  001ef	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  001f2	99		 cdq
  001f3	f7 7d f0	 idiv	 DWORD PTR _nCols$1$[ebp]
  001f6	83 6d ec 01	 sub	 DWORD PTR tv422[ebp], 1
  001fa	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  001fd	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00200	8b 44 90 04	 mov	 eax, DWORD PTR [eax+edx*4+4]
  00204	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 80   : 		pGameMap[nIndex2 / nCols + 1][nIndex2 % nCols + 1] = nTmp;  

  00207	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0020a	8b 75 e8	 mov	 esi, DWORD PTR _nVertexNum$1$[ebp]
  0020d	89 7c 90 04	 mov	 DWORD PTR [eax+edx*4+4], edi
  00211	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__rand
  00217	75 b8		 jne	 SHORT $LL13@InitMap
$LN12@InitMap:

; 81   : 	} 
; 82   : 
; 83   : 	return pGameMap;

  00219	8b c3		 mov	 eax, ebx

; 84   : }

  0021b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0021e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00225	59		 pop	 ecx
  00226	5f		 pop	 edi
  00227	5e		 pop	 esi
  00228	5b		 pop	 ebx
  00229	8b e5		 mov	 esp, ebp
  0022b	5d		 pop	 ebp
  0022c	c3		 ret	 0
$LN59@InitMap:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitMap@CGameLogic@@QAEPAPAHXZ$0:
  00000	6a 04		 push	 4
  00002	8b 45 dc	 mov	 eax, DWORD PTR $T3[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?InitMap@CGameLogic@@QAEPAPAHXZ$2:
  0000f	6a 04		 push	 4
  00011	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
  0001d	c3		 ret	 0
__ehhandler$?InitMap@CGameLogic@@QAEPAPAHXZ:
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00025	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InitMap@CGameLogic@@QAEPAPAHXZ
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InitMap@CGameLogic@@QAEPAPAHXZ ENDP			; CGameLogic::InitMap
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ??1CGameLogic@@QAE@XZ
_TEXT	SEGMENT
??1CGameLogic@@QAE@XZ PROC				; CGameLogic::~CGameLogic, COMDAT
; _this$ = ecx

; 19   : }

  00000	c3		 ret	 0
??1CGameLogic@@QAE@XZ ENDP				; CGameLogic::~CGameLogic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ??0CGameLogic@@QAE@XZ
_TEXT	SEGMENT
??0CGameLogic@@QAE@XZ PROC				; CGameLogic::CGameLogic, COMDAT
; _this$ = ecx

; 13   : 	m_nVexNum = 0;

  00000	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 14   : }

  00007	8b c1		 mov	 eax, ecx
  00009	c3		 ret	 0
??0CGameLogic@@QAE@XZ ENDP				; CGameLogic::CGameLogic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?ClearStack@CGameLogic@@IAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?ClearStack@CGameLogic@@IAEXXZ PROC			; CGameLogic::ClearStack, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 161  : 	for (; m_nVexNum > 0; m_nVexNum--)

  00006	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  0000a	7e 31		 jle	 SHORT $LN3@ClearStack

; 162  : 	{
; 163  : 		m_avPath[m_nVexNum - 1] = { BLANK,BLANK,BLANK };

  0000c	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR $T1[ebp], -1
  00013	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR $T1[ebp+4], -1
  0001a	c5 fa 7e 45 f4	 vmovq	 xmm0, QWORD PTR $T1[ebp]
  0001f	90		 npad	 1
$LL4@ClearStack:
  00020	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00023	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00026	c5 f9 d6 44 81
	f4		 vmovq	 QWORD PTR [ecx+eax*4-12], xmm0
  0002c	c7 44 81 fc ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax*4-4], -1
  00034	ff 49 30	 dec	 DWORD PTR [ecx+48]
  00037	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  0003b	7f e3		 jg	 SHORT $LL4@ClearStack
$LN3@ClearStack:

; 164  : 	}
; 165  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?ClearStack@CGameLogic@@IAEXXZ ENDP			; CGameLogic::ClearStack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?PopVertex@CGameLogic@@IAE?AUtagVertex@@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?PopVertex@CGameLogic@@IAE?AUtagVertex@@XZ PROC		; CGameLogic::PopVertex, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  : 	Vertex retPop = { BLANK,BLANK,BLANK };

  00003	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1
  00012	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1
  00019	c7 42 08 ff ff
	ff ff		 mov	 DWORD PTR [edx+8], -1

; 150  : 	if (m_nVexNum > 0)

  00020	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00023	85 c0		 test	 eax, eax
  00025	7e 36		 jle	 SHORT $LN4@PopVertex

; 151  : 	{
; 152  : 		retPop = m_avPath[m_nVexNum];

  00027	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]

; 153  : 		m_avPath[m_nVexNum--] = { BLANK,BLANK,BLANK };

  0002a	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR $T1[ebp], -1
  00031	c5 fa 7e 04 86	 vmovq	 xmm0, QWORD PTR [esi+eax*4]
  00036	8b 4c 86 08	 mov	 ecx, DWORD PTR [esi+eax*4+8]
  0003a	c5 f9 d6 02	 vmovq	 QWORD PTR [edx], xmm0
  0003e	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR $T1[ebp+4], -1
  00045	c5 fa 7e 45 f4	 vmovq	 xmm0, QWORD PTR $T1[ebp]
  0004a	c5 f9 d6 04 86	 vmovq	 QWORD PTR [esi+eax*4], xmm0
  0004f	c7 44 86 08 ff
	ff ff ff	 mov	 DWORD PTR [esi+eax*4+8], -1
  00057	ff 4e 30	 dec	 DWORD PTR [esi+48]
  0005a	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN4@PopVertex:

; 154  : 	}
; 155  : 	return retPop;

  0005d	8b c2		 mov	 eax, edx
  0005f	5e		 pop	 esi

; 156  : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?PopVertex@CGameLogic@@IAE?AUtagVertex@@XZ ENDP		; CGameLogic::PopVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?PushVertex@CGameLogic@@IAEXUtagVertex@@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 12
?PushVertex@CGameLogic@@IAEXUtagVertex@@@Z PROC		; CGameLogic::PushVertex, COMDAT
; _this$ = ecx

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 142  : 	if(m_nVexNum <= PathLen)

  00003	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00006	83 f8 04	 cmp	 eax, 4
  00009	7f 18		 jg	 SHORT $LN2@PushVertex

; 143  : 		m_avPath[m_nVexNum++] = v;

  0000b	c5 fa 7e 45 08	 vmovq	 xmm0, QWORD PTR _v$[ebp]
  00010	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00013	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00016	c5 f9 d6 02	 vmovq	 QWORD PTR [edx], xmm0
  0001a	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp+8]
  0001d	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00020	ff 41 30	 inc	 DWORD PTR [ecx+48]
$LN2@PushVertex:

; 144  : }

  00023	5d		 pop	 ebp
  00024	c2 0c 00	 ret	 12			; 0000000cH
?PushVertex@CGameLogic@@IAEXUtagVertex@@@Z ENDP		; CGameLogic::PushVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?LineY@CGameLogic@@IAE_NPAPAHHHH@Z
_TEXT	SEGMENT
_pGameMap$ = 8						; size = 4
_nRow1$ = 12						; size = 4
_nRow2$ = 16						; size = 4
_nCol$ = 20						; size = 4
?LineY@CGameLogic@@IAE_NPAPAHHHH@Z PROC			; CGameLogic::LineY, COMDAT
; _this$ = ecx

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 248  : 	//保证 nRow1 的值小于 nRow2 
; 249  : 	if (nRow1 > nRow2)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _nRow1$[ebp]
  00006	8b 55 10	 mov	 edx, DWORD PTR _nRow2$[ebp]
  00009	3b ca		 cmp	 ecx, edx
  0000b	7e 06		 jle	 SHORT $LN5@LineY

; 250  : 	{
; 251  : 		int nTemp = nRow1;

  0000d	8b c1		 mov	 eax, ecx

; 252  : 		nRow1 = nRow2;

  0000f	8b ca		 mov	 ecx, edx

; 253  : 		nRow2 = nTemp;

  00011	8b d0		 mov	 edx, eax
$LN5@LineY:

; 254  : 	}
; 255  : 	//直通  
; 256  : 	for (int i = nRow1 + 1; i <= nRow2; i++)

  00013	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	3b c2		 cmp	 eax, edx
  0001a	7f 16		 jg	 SHORT $LN11@LineY
  0001c	8b 75 14	 mov	 esi, DWORD PTR _nCol$[ebp]
  0001f	8b 7d 08	 mov	 edi, DWORD PTR _pGameMap$[ebp]
$LN15@LineY:

; 257  : 	{
; 258  : 		if (i == nRow2)

  00022	74 16		 je	 SHORT $LN10@LineY

; 260  : 		if (pGameMap[i][nCol] != BLANK)

  00024	8b 0c 87	 mov	 ecx, DWORD PTR [edi+eax*4]
  00027	83 3c b1 ff	 cmp	 DWORD PTR [ecx+esi*4], -1
  0002b	75 05		 jne	 SHORT $LN11@LineY

; 254  : 	}
; 255  : 	//直通  
; 256  : 	for (int i = nRow1 + 1; i <= nRow2; i++)

  0002d	40		 inc	 eax
  0002e	3b c2		 cmp	 eax, edx
  00030	7e f0		 jle	 SHORT $LN15@LineY
$LN11@LineY:
  00032	5f		 pop	 edi

; 261  : 			break;
; 262  : 	}
; 263  : 	return false;

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 264  : }

  00036	5d		 pop	 ebp
  00037	c2 10 00	 ret	 16			; 00000010H
$LN10@LineY:
  0003a	5f		 pop	 edi

; 259  : 			return true;

  0003b	b0 01		 mov	 al, 1
  0003d	5e		 pop	 esi

; 264  : }

  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?LineY@CGameLogic@@IAE_NPAPAHHHH@Z ENDP			; CGameLogic::LineY
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?LineX@CGameLogic@@IAE_NPAPAHHHH@Z
_TEXT	SEGMENT
_pGameMap$ = 8						; size = 4
_nRow$ = 12						; size = 4
_nCol1$ = 16						; size = 4
_nCol2$ = 20						; size = 4
?LineX@CGameLogic@@IAE_NPAPAHHHH@Z PROC			; CGameLogic::LineX, COMDAT
; _this$ = ecx

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 228  : 	//保证 nCol1 的值小于 nCol2 
; 229  : 	if (nCol1 > nCol2)

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _nCol1$[ebp]
  00006	56		 push	 esi
  00007	8b 75 14	 mov	 esi, DWORD PTR _nCol2$[ebp]
  0000a	3b ce		 cmp	 ecx, esi
  0000c	7e 06		 jle	 SHORT $LN5@LineX

; 230  : 	{   //数据交换   
; 231  : 		int nTemp = nCol1;

  0000e	8b c1		 mov	 eax, ecx

; 232  : 		nCol1 = nCol2;

  00010	8b ce		 mov	 ecx, esi

; 233  : 		nCol2 = nTemp;

  00012	8b f0		 mov	 esi, eax
$LN5@LineX:

; 234  : 	}
; 235  : 	//直通   
; 236  : 	for (int i = nCol1 + 1; i <= nCol2; i++)

  00014	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00017	3b c6		 cmp	 eax, esi
  00019	7f 18		 jg	 SHORT $LN11@LineX

; 240  : 		if (pGameMap[nRow][i] != BLANK)

  0001b	8b 55 0c	 mov	 edx, DWORD PTR _nRow$[ebp]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _pGameMap$[ebp]
  00021	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
$LN15@LineX:

; 237  : 	{
; 238  : 		if (i == nCol2)

  00024	74 14		 je	 SHORT $LN10@LineX

; 240  : 		if (pGameMap[nRow][i] != BLANK)

  00026	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00028	83 3c 81 ff	 cmp	 DWORD PTR [ecx+eax*4], -1
  0002c	75 05		 jne	 SHORT $LN11@LineX

; 234  : 	}
; 235  : 	//直通   
; 236  : 	for (int i = nCol1 + 1; i <= nCol2; i++)

  0002e	40		 inc	 eax
  0002f	3b c6		 cmp	 eax, esi
  00031	7e f1		 jle	 SHORT $LN15@LineX
$LN11@LineX:

; 241  : 			break;
; 242  : 	}
; 243  : 	return false;

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 244  : }

  00036	5d		 pop	 ebp
  00037	c2 10 00	 ret	 16			; 00000010H
$LN10@LineX:

; 239  : 			return true;

  0003a	b0 01		 mov	 al, 1
  0003c	5e		 pop	 esi

; 244  : }

  0003d	5d		 pop	 ebp
  0003e	c2 10 00	 ret	 16			; 00000010H
?LineX@CGameLogic@@IAE_NPAPAHHHH@Z ENDP			; CGameLogic::LineX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?TwoCornerLink@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z
_TEXT	SEGMENT
_vx2$1 = -32						; size = 12
_vx1$2 = -20						; size = 12
_vx2$3 = -20						; size = 12
_this$1$ = -8						; size = 4
$T4 = -4						; size = 4
_pGameMap$ = 8						; size = 4
_vx1$5 = 12						; size = 12
_v1$ = 12						; size = 12
_v2$ = 24						; size = 12
?TwoCornerLink@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z PROC ; CGameLogic::TwoCornerLink, COMDAT
; _this$ = ecx

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx

; 294  : 	for (int nCol = 0; nCol < CGameControl::s_nCols + 2; nCol++)

  00007	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?s_nCols@CGameControl@@2HA ; CGameControl::s_nCols
  0000d	56		 push	 esi
  0000e	83 c3 02	 add	 ebx, 2
  00011	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00014	33 f6		 xor	 esi, esi
  00016	89 5d fc	 mov	 DWORD PTR $T4[ebp], ebx
  00019	57		 push	 edi
  0001a	8b 7d 08	 mov	 edi, DWORD PTR _pGameMap$[ebp]
  0001d	85 db		 test	 ebx, ebx
  0001f	0f 8e 8a 00 00
	00		 jle	 $LN112@TwoCornerL
  00025	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  00028	8b 4d 18	 mov	 ecx, DWORD PTR _v2$[ebp]
  0002b	8b 1c 87	 mov	 ebx, DWORD PTR [edi+eax*4]
  0002e	8b 45 fc	 mov	 eax, DWORD PTR $T4[ebp]
$LL4@TwoCornerL:

; 295  : 	{
; 296  : 		// 找到一条与 Y 轴平行的连通线段  
; 297  : 		if (pGameMap[v1.row][nCol] == BLANK && pGameMap[v2.row][nCol] == BLANK)

  00031	83 3c b3 ff	 cmp	 DWORD PTR [ebx+esi*4], -1
  00035	75 73		 jne	 SHORT $LN2@TwoCornerL
  00037	8b 04 8f	 mov	 eax, DWORD PTR [edi+ecx*4]
  0003a	83 3c b0 ff	 cmp	 DWORD PTR [eax+esi*4], -1
  0003e	75 67		 jne	 SHORT $LN117@TwoCornerL

; 298  : 		{
; 299  : 			if (LineY(pGameMap, v1.row, v2.row, nCol))

  00040	8b 45 18	 mov	 eax, DWORD PTR _v2$[ebp]
  00043	8b d0		 mov	 edx, eax
  00045	8b 4d 0c	 mov	 ecx, DWORD PTR _v1$[ebp]

; 249  : 	if (nRow1 > nRow2)

  00048	3b c8		 cmp	 ecx, eax
  0004a	7e 05		 jle	 SHORT $LN19@TwoCornerL

; 253  : 		nRow2 = nTemp;

  0004c	8b 55 0c	 mov	 edx, DWORD PTR _v1$[ebp]
  0004f	8b c8		 mov	 ecx, eax
$LN19@TwoCornerL:

; 254  : 	}
; 255  : 	//直通  
; 256  : 	for (int i = nRow1 + 1; i <= nRow2; i++)

  00051	41		 inc	 ecx
  00052	3b ca		 cmp	 ecx, edx
  00054	7f 4e		 jg	 SHORT $LN118@TwoCornerL
$LN126@TwoCornerL:

; 257  : 	{
; 258  : 		if (i == nRow2)

  00056	74 10		 je	 SHORT $LN107@TwoCornerL

; 259  : 			return true;
; 260  : 		if (pGameMap[i][nCol] != BLANK)

  00058	8b 04 8f	 mov	 eax, DWORD PTR [edi+ecx*4]
  0005b	83 3c b0 ff	 cmp	 DWORD PTR [eax+esi*4], -1
  0005f	75 43		 jne	 SHORT $LN118@TwoCornerL

; 254  : 	}
; 255  : 	//直通  
; 256  : 	for (int i = nRow1 + 1; i <= nRow2; i++)

  00061	41		 inc	 ecx
  00062	3b ca		 cmp	 ecx, edx
  00064	7e f0		 jle	 SHORT $LN126@TwoCornerL

; 317  : 		{ 
; 318  : 			if(LineX(pGameMap, nRow, v1.col, v2.col))  
; 319  : 			{  
; 320  : 				if(LineY(pGameMap, nRow, v1.row, v1.col) && LineY(pGameMap, nRow, v2.row, v2.col)) 

  00066	eb 3c		 jmp	 SHORT $LN118@TwoCornerL
$LN107@TwoCornerL:

; 300  : 			{
; 301  : 				if (LineX(pGameMap, v1.row, v1.col, nCol) && LineX(pGameMap, v2.row, v2.col, nCol))

  00068	8b 4d 10	 mov	 ecx, DWORD PTR _v1$[ebp+4]
  0006b	8b d6		 mov	 edx, esi
  0006d	8b c1		 mov	 eax, ecx

; 229  : 	if (nCol1 > nCol2)

  0006f	3b ce		 cmp	 ecx, esi
  00071	7e 04		 jle	 SHORT $LN27@TwoCornerL

; 230  : 	{   //数据交换   
; 231  : 		int nTemp = nCol1;
; 232  : 		nCol1 = nCol2;

  00073	8b c6		 mov	 eax, esi

; 233  : 		nCol2 = nTemp;

  00075	8b d1		 mov	 edx, ecx
$LN27@TwoCornerL:

; 234  : 	}
; 235  : 	//直通   
; 236  : 	for (int i = nCol1 + 1; i <= nCol2; i++)

  00077	40		 inc	 eax
  00078	3b c2		 cmp	 eax, edx
  0007a	7f 28		 jg	 SHORT $LN118@TwoCornerL
  0007c	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
$LN127@TwoCornerL:

; 237  : 	{
; 238  : 		if (i == nCol2)

  0007f	74 0f		 je	 SHORT $LN108@TwoCornerL

; 239  : 			return true;
; 240  : 		if (pGameMap[nRow][i] != BLANK)

  00081	83 39 ff	 cmp	 DWORD PTR [ecx], -1
  00084	75 1e		 jne	 SHORT $LN118@TwoCornerL

; 234  : 	}
; 235  : 	//直通   
; 236  : 	for (int i = nCol1 + 1; i <= nCol2; i++)

  00086	40		 inc	 eax
  00087	83 c1 04	 add	 ecx, 4
  0008a	3b c2		 cmp	 eax, edx
  0008c	7e f1		 jle	 SHORT $LN127@TwoCornerL

; 317  : 		{ 
; 318  : 			if(LineX(pGameMap, nRow, v1.col, v2.col))  
; 319  : 			{  
; 320  : 				if(LineY(pGameMap, nRow, v1.row, v1.col) && LineY(pGameMap, nRow, v2.row, v2.col)) 

  0008e	eb 14		 jmp	 SHORT $LN118@TwoCornerL
$LN108@TwoCornerL:

; 300  : 			{
; 301  : 				if (LineX(pGameMap, v1.row, v1.col, nCol) && LineX(pGameMap, v2.row, v2.col, nCol))

  00090	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00093	56		 push	 esi
  00094	ff 75 1c	 push	 DWORD PTR _v2$[ebp+4]
  00097	ff 75 18	 push	 DWORD PTR _v2$[ebp]
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 ?LineX@CGameLogic@@IAE_NPAPAHHHH@Z ; CGameLogic::LineX
  000a0	84 c0		 test	 al, al
  000a2	75 79		 jne	 SHORT $LN78@TwoCornerL
$LN118@TwoCornerL:
  000a4	8b 4d 18	 mov	 ecx, DWORD PTR _v2$[ebp]
$LN117@TwoCornerL:
  000a7	8b 45 fc	 mov	 eax, DWORD PTR $T4[ebp]
$LN2@TwoCornerL:

; 294  : 	for (int nCol = 0; nCol < CGameControl::s_nCols + 2; nCol++)

  000aa	46		 inc	 esi
  000ab	3b f0		 cmp	 esi, eax
  000ad	7c 82		 jl	 SHORT $LL4@TwoCornerL
$LN112@TwoCornerL:

; 309  : 				}
; 310  : 			}
; 311  : 		}
; 312  : 	}
; 313  : 	for (int nRow = 0; nRow < CGameControl::s_nRows + 2; nRow++)

  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_nRows@CGameControl@@2HA ; CGameControl::s_nRows
  000b4	33 f6		 xor	 esi, esi
  000b6	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]
  000b9	85 db		 test	 ebx, ebx
  000bb	0f 8e 1e 01 00
	00		 jle	 $LN6@TwoCornerL
  000c1	8b 45 10	 mov	 eax, DWORD PTR _v1$[ebp+4]
  000c4	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL7@TwoCornerL:

; 314  : 	{  
; 315  : 		// 找到一条与 X 轴平行的连通线段  
; 316  : 		if(pGameMap[nRow][v1.col] == BLANK && pGameMap[nRow][v2.col] == BLANK)  

  000d0	8b 0c b7	 mov	 ecx, DWORD PTR [edi+esi*4]
  000d3	83 3c 81 ff	 cmp	 DWORD PTR [ecx+eax*4], -1
  000d7	0f 85 f9 00 00
	00		 jne	 $LN5@TwoCornerL
  000dd	8b 55 1c	 mov	 edx, DWORD PTR _v2$[ebp+4]
  000e0	83 3c 91 ff	 cmp	 DWORD PTR [ecx+edx*4], -1
  000e4	0f 85 ec 00 00
	00		 jne	 $LN5@TwoCornerL

; 229  : 	if (nCol1 > nCol2)

  000ea	8b fa		 mov	 edi, edx
  000ec	39 7d 10	 cmp	 DWORD PTR _v1$[ebp+4], edi
  000ef	8b 7d 08	 mov	 edi, DWORD PTR _pGameMap$[ebp]
  000f2	7e 05		 jle	 SHORT $LN41@TwoCornerL

; 230  : 	{   //数据交换   
; 231  : 		int nTemp = nCol1;
; 232  : 		nCol1 = nCol2;

  000f4	8b c2		 mov	 eax, edx

; 233  : 		nCol2 = nTemp;

  000f6	8b 55 10	 mov	 edx, DWORD PTR _v1$[ebp+4]
$LN41@TwoCornerL:

; 234  : 	}
; 235  : 	//直通   
; 236  : 	for (int i = nCol1 + 1; i <= nCol2; i++)

  000f9	40		 inc	 eax
  000fa	3b c2		 cmp	 eax, edx
  000fc	0f 8f d1 00 00
	00		 jg	 $LN125@TwoCornerL

; 239  : 			return true;
; 240  : 		if (pGameMap[nRow][i] != BLANK)

  00102	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
$LN128@TwoCornerL:

; 237  : 	{
; 238  : 		if (i == nCol2)

  00105	74 76		 je	 SHORT $LN109@TwoCornerL

; 239  : 			return true;
; 240  : 		if (pGameMap[nRow][i] != BLANK)

  00107	83 39 ff	 cmp	 DWORD PTR [ecx], -1
  0010a	0f 85 c3 00 00
	00		 jne	 $LN125@TwoCornerL

; 234  : 	}
; 235  : 	//直通   
; 236  : 	for (int i = nCol1 + 1; i <= nCol2; i++)

  00110	40		 inc	 eax
  00111	83 c1 04	 add	 ecx, 4
  00114	3b c2		 cmp	 eax, edx
  00116	7e ed		 jle	 SHORT $LN128@TwoCornerL

; 317  : 		{ 
; 318  : 			if(LineX(pGameMap, nRow, v1.col, v2.col))  
; 319  : 			{  
; 320  : 				if(LineY(pGameMap, nRow, v1.row, v1.col) && LineY(pGameMap, nRow, v2.row, v2.col)) 

  00118	e9 b6 00 00 00	 jmp	 $LN125@TwoCornerL
$LN78@TwoCornerL:

; 302  : 				{
; 303  : 					// 保存节点     
; 304  : 					Vertex vx1 = { v1.row, nCol, BLANK };

  0011d	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]

; 142  : 	if(m_nVexNum <= PathLen)

  00120	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]

; 302  : 				{
; 303  : 					// 保存节点     
; 304  : 					Vertex vx1 = { v1.row, nCol, BLANK };

  00123	89 45 0c	 mov	 DWORD PTR _vx1$5[ebp], eax

; 305  : 					Vertex vx2 = { v2.row, nCol, BLANK };

  00126	8b 45 18	 mov	 eax, DWORD PTR _v2$[ebp]
  00129	89 45 ec	 mov	 DWORD PTR _vx2$3[ebp], eax

; 142  : 	if(m_nVexNum <= PathLen)

  0012c	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]

; 302  : 				{
; 303  : 					// 保存节点     
; 304  : 					Vertex vx1 = { v1.row, nCol, BLANK };

  0012f	89 75 10	 mov	 DWORD PTR _vx1$5[ebp+4], esi

; 305  : 					Vertex vx2 = { v2.row, nCol, BLANK };

  00132	89 75 f0	 mov	 DWORD PTR _vx2$3[ebp+4], esi

; 142  : 	if(m_nVexNum <= PathLen)

  00135	83 f8 04	 cmp	 eax, 4
  00138	7f 18		 jg	 SHORT $LN32@TwoCornerL

; 143  : 		m_avPath[m_nVexNum++] = v;

  0013a	c5 fa 7e 45 0c	 vmovq	 xmm0, QWORD PTR _vx1$5[ebp]
  0013f	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00142	c5 f9 d6 04 81	 vmovq	 QWORD PTR [ecx+eax*4], xmm0
  00147	c7 44 81 08 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax*4+8], -1
  0014f	ff 41 30	 inc	 DWORD PTR [ecx+48]
$LN32@TwoCornerL:

; 142  : 	if(m_nVexNum <= PathLen)

  00152	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00155	83 f8 04	 cmp	 eax, 4
  00158	7f 18		 jg	 SHORT $LN35@TwoCornerL

; 143  : 		m_avPath[m_nVexNum++] = v;

  0015a	c5 fa 7e 45 ec	 vmovq	 xmm0, QWORD PTR _vx2$3[ebp]
$LN132@TwoCornerL:
  0015f	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00162	c5 f9 d6 04 81	 vmovq	 QWORD PTR [ecx+eax*4], xmm0
  00167	c7 44 81 08 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax*4+8], -1
  0016f	ff 41 30	 inc	 DWORD PTR [ecx+48]
$LN35@TwoCornerL:
  00172	5f		 pop	 edi
  00173	5e		 pop	 esi

; 306  : 					PushVertex(vx1);
; 307  : 					PushVertex(vx2);
; 308  : 					return true;

  00174	b0 01		 mov	 al, 1
  00176	5b		 pop	 ebx

; 333  : }

  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c2 1c 00	 ret	 28			; 0000001cH
$LN109@TwoCornerL:

; 317  : 		{ 
; 318  : 			if(LineX(pGameMap, nRow, v1.col, v2.col))  
; 319  : 			{  
; 320  : 				if(LineY(pGameMap, nRow, v1.row, v1.col) && LineY(pGameMap, nRow, v2.row, v2.col)) 

  0017d	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  00180	8b ce		 mov	 ecx, esi
  00182	8b d0		 mov	 edx, eax

; 249  : 	if (nRow1 > nRow2)

  00184	3b f0		 cmp	 esi, eax
  00186	7e 04		 jle	 SHORT $LN49@TwoCornerL

; 250  : 	{
; 251  : 		int nTemp = nRow1;
; 252  : 		nRow1 = nRow2;

  00188	8b c8		 mov	 ecx, eax

; 253  : 		nRow2 = nTemp;

  0018a	8b d6		 mov	 edx, esi
$LN49@TwoCornerL:

; 254  : 	}
; 255  : 	//直通  
; 256  : 	for (int i = nRow1 + 1; i <= nRow2; i++)

  0018c	41		 inc	 ecx
  0018d	3b ca		 cmp	 ecx, edx
  0018f	7f 42		 jg	 SHORT $LN125@TwoCornerL
$LN129@TwoCornerL:

; 257  : 	{
; 258  : 		if (i == nRow2)

  00191	74 16		 je	 SHORT $LN110@TwoCornerL

; 259  : 			return true;
; 260  : 		if (pGameMap[i][nCol] != BLANK)

  00193	8b 04 8f	 mov	 eax, DWORD PTR [edi+ecx*4]
  00196	8b 7d 10	 mov	 edi, DWORD PTR _v1$[ebp+4]
  00199	83 3c b8 ff	 cmp	 DWORD PTR [eax+edi*4], -1
  0019d	8b 7d 08	 mov	 edi, DWORD PTR _pGameMap$[ebp]
  001a0	75 31		 jne	 SHORT $LN125@TwoCornerL

; 254  : 	}
; 255  : 	//直通  
; 256  : 	for (int i = nRow1 + 1; i <= nRow2; i++)

  001a2	41		 inc	 ecx
  001a3	3b ca		 cmp	 ecx, edx
  001a5	7e ea		 jle	 SHORT $LN129@TwoCornerL

; 317  : 		{ 
; 318  : 			if(LineX(pGameMap, nRow, v1.col, v2.col))  
; 319  : 			{  
; 320  : 				if(LineY(pGameMap, nRow, v1.row, v1.col) && LineY(pGameMap, nRow, v2.row, v2.col)) 

  001a7	eb 2a		 jmp	 SHORT $LN125@TwoCornerL
$LN110@TwoCornerL:
  001a9	8b 45 18	 mov	 eax, DWORD PTR _v2$[ebp]
  001ac	8b ce		 mov	 ecx, esi
  001ae	8b d0		 mov	 edx, eax

; 249  : 	if (nRow1 > nRow2)

  001b0	3b f0		 cmp	 esi, eax
  001b2	7e 04		 jle	 SHORT $LN57@TwoCornerL

; 250  : 	{
; 251  : 		int nTemp = nRow1;
; 252  : 		nRow1 = nRow2;

  001b4	8b c8		 mov	 ecx, eax

; 253  : 		nRow2 = nTemp;

  001b6	8b d6		 mov	 edx, esi
$LN57@TwoCornerL:

; 254  : 	}
; 255  : 	//直通  
; 256  : 	for (int i = nRow1 + 1; i <= nRow2; i++)

  001b8	41		 inc	 ecx
  001b9	3b ca		 cmp	 ecx, edx
  001bb	7f 16		 jg	 SHORT $LN125@TwoCornerL
$LN130@TwoCornerL:

; 257  : 	{
; 258  : 		if (i == nRow2)

  001bd	74 2b		 je	 SHORT $LN85@TwoCornerL

; 259  : 			return true;
; 260  : 		if (pGameMap[i][nCol] != BLANK)

  001bf	8b 04 8f	 mov	 eax, DWORD PTR [edi+ecx*4]
  001c2	8b 7d 1c	 mov	 edi, DWORD PTR _v2$[ebp+4]
  001c5	83 3c b8 ff	 cmp	 DWORD PTR [eax+edi*4], -1
  001c9	8b 7d 08	 mov	 edi, DWORD PTR _pGameMap$[ebp]
  001cc	75 05		 jne	 SHORT $LN125@TwoCornerL

; 254  : 	}
; 255  : 	//直通  
; 256  : 	for (int i = nRow1 + 1; i <= nRow2; i++)

  001ce	41		 inc	 ecx
  001cf	3b ca		 cmp	 ecx, edx
  001d1	7e ea		 jle	 SHORT $LN130@TwoCornerL
$LN125@TwoCornerL:
  001d3	8b 45 10	 mov	 eax, DWORD PTR _v1$[ebp+4]
$LN5@TwoCornerL:

; 309  : 				}
; 310  : 			}
; 311  : 		}
; 312  : 	}
; 313  : 	for (int nRow = 0; nRow < CGameControl::s_nRows + 2; nRow++)

  001d6	46		 inc	 esi
  001d7	3b f3		 cmp	 esi, ebx
  001d9	0f 8c f1 fe ff
	ff		 jl	 $LL7@TwoCornerL
$LN6@TwoCornerL:
  001df	5f		 pop	 edi
  001e0	5e		 pop	 esi

; 328  : 				}  
; 329  : 			}  
; 330  : 		} 
; 331  : 	} 
; 332  : 	return false;

  001e1	32 c0		 xor	 al, al
  001e3	5b		 pop	 ebx

; 333  : }

  001e4	8b e5		 mov	 esp, ebp
  001e6	5d		 pop	 ebp
  001e7	c2 1c 00	 ret	 28			; 0000001cH
$LN85@TwoCornerL:

; 321  : 				{   
; 322  : 					// 保存节点      
; 323  : 					Vertex vx1 = { nRow, v1.col, BLANK };

  001ea	8b 45 10	 mov	 eax, DWORD PTR _v1$[ebp+4]

; 142  : 	if(m_nVexNum <= PathLen)

  001ed	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]

; 321  : 				{   
; 322  : 					// 保存节点      
; 323  : 					Vertex vx1 = { nRow, v1.col, BLANK };

  001f0	89 45 f0	 mov	 DWORD PTR _vx1$2[ebp+4], eax

; 324  : 					Vertex vx2 = { nRow, v2.col, BLANK };

  001f3	8b 45 1c	 mov	 eax, DWORD PTR _v2$[ebp+4]
  001f6	89 45 e4	 mov	 DWORD PTR _vx2$1[ebp+4], eax

; 142  : 	if(m_nVexNum <= PathLen)

  001f9	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]

; 321  : 				{   
; 322  : 					// 保存节点      
; 323  : 					Vertex vx1 = { nRow, v1.col, BLANK };

  001fc	89 75 ec	 mov	 DWORD PTR _vx1$2[ebp], esi

; 324  : 					Vertex vx2 = { nRow, v2.col, BLANK };

  001ff	89 75 e0	 mov	 DWORD PTR _vx2$1[ebp], esi

; 142  : 	if(m_nVexNum <= PathLen)

  00202	83 f8 04	 cmp	 eax, 4
  00205	7f 18		 jg	 SHORT $LN62@TwoCornerL

; 143  : 		m_avPath[m_nVexNum++] = v;

  00207	c5 fa 7e 45 ec	 vmovq	 xmm0, QWORD PTR _vx1$2[ebp]
  0020c	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0020f	c5 f9 d6 04 81	 vmovq	 QWORD PTR [ecx+eax*4], xmm0
  00214	c7 44 81 08 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax*4+8], -1
  0021c	ff 41 30	 inc	 DWORD PTR [ecx+48]
$LN62@TwoCornerL:

; 142  : 	if(m_nVexNum <= PathLen)

  0021f	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00222	83 f8 04	 cmp	 eax, 4
  00225	0f 8f 47 ff ff
	ff		 jg	 $LN35@TwoCornerL

; 143  : 		m_avPath[m_nVexNum++] = v;

  0022b	c5 fa 7e 45 e0	 vmovq	 xmm0, QWORD PTR _vx2$1[ebp]

; 325  : 					PushVertex(vx1);    
; 326  : 					PushVertex(vx2);    
; 327  : 					return true;    

  00230	e9 2a ff ff ff	 jmp	 $LN132@TwoCornerL
?TwoCornerLink@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z ENDP ; CGameLogic::TwoCornerLink
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?OneCornerLink@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z
_TEXT	SEGMENT
_pGameMap$ = 8						; size = 4
_v$1 = 12						; size = 12
_v1$ = 12						; size = 12
_v$2 = 24						; size = 12
_v2$ = 24						; size = 12
?OneCornerLink@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z PROC ; CGameLogic::OneCornerLink, COMDAT
; _this$ = ecx

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 269  : 	// 直角能够消子，那么顶点一定在与两个点的行和列相交的点，只有这两个点为空，才有可能实现二条直线消子 
; 270  : 	if (pGameMap[v1.row][v2.col] == BLANK)

  00003	8b 55 1c	 mov	 edx, DWORD PTR _v2$[ebp+4]
  00006	53		 push	 ebx
  00007	8b 5d 18	 mov	 ebx, DWORD PTR _v2$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _pGameMap$[ebp]
  0000f	8b f1		 mov	 esi, ecx
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _v1$[ebp]
  00014	8b 04 8f	 mov	 eax, DWORD PTR [edi+ecx*4]
  00017	83 3c 90 ff	 cmp	 DWORD PTR [eax+edx*4], -1
  0001b	75 2c		 jne	 SHORT $LN3@OneCornerL

; 271  : 	{ 
; 272  : 		if (LineY(pGameMap, v1.row, v2.row, v2.col) && LineX(pGameMap, v1.row, v1.col, v2.col))

  0001d	8b d3		 mov	 edx, ebx
  0001f	8b c1		 mov	 eax, ecx

; 249  : 	if (nRow1 > nRow2)

  00021	3b cb		 cmp	 ecx, ebx
  00023	7e 04		 jle	 SHORT $LN11@OneCornerL

; 250  : 	{
; 251  : 		int nTemp = nRow1;
; 252  : 		nRow1 = nRow2;

  00025	8b c3		 mov	 eax, ebx

; 253  : 		nRow2 = nTemp;

  00027	8b d1		 mov	 edx, ecx
$LN11@OneCornerL:

; 254  : 	}
; 255  : 	//直通  
; 256  : 	for (int i = nRow1 + 1; i <= nRow2; i++)

  00029	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0002c	3b ca		 cmp	 ecx, edx
  0002e	7f 16		 jg	 SHORT $LN30@OneCornerL
$LN31@OneCornerL:

; 257  : 	{
; 258  : 		if (i == nRow2)

  00030	74 61		 je	 SHORT $LN27@OneCornerL

; 259  : 			return true;
; 260  : 		if (pGameMap[i][nCol] != BLANK)

  00032	8b 5d 1c	 mov	 ebx, DWORD PTR _v2$[ebp+4]
  00035	8b 04 8f	 mov	 eax, DWORD PTR [edi+ecx*4]
  00038	83 3c 98 ff	 cmp	 DWORD PTR [eax+ebx*4], -1
  0003c	8b 5d 18	 mov	 ebx, DWORD PTR _v2$[ebp]
  0003f	75 05		 jne	 SHORT $LN30@OneCornerL

; 254  : 	}
; 255  : 	//直通  
; 256  : 	for (int i = nRow1 + 1; i <= nRow2; i++)

  00041	41		 inc	 ecx
  00042	3b ca		 cmp	 ecx, edx
  00044	7e ea		 jle	 SHORT $LN31@OneCornerL
$LN30@OneCornerL:
  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _v1$[ebp]
$LN3@OneCornerL:

; 277  : 		}
; 278  : 	}    
; 279  : 	if (pGameMap[v2.row][v1.col] == BLANK)

  00049	8b 04 9f	 mov	 eax, DWORD PTR [edi+ebx*4]
  0004c	8b 55 10	 mov	 edx, DWORD PTR _v1$[ebp+4]
  0004f	83 3c 90 ff	 cmp	 DWORD PTR [eax+edx*4], -1
  00053	0f 85 84 00 00
	00		 jne	 $LN5@OneCornerL

; 280  : 	{
; 281  : 		if (LineY(pGameMap, v1.row, v2.row, v1.col) && LineX(pGameMap, v2.row, v1.col, v2.col))

  00059	52		 push	 edx
  0005a	53		 push	 ebx
  0005b	51		 push	 ecx
  0005c	57		 push	 edi
  0005d	8b ce		 mov	 ecx, esi
  0005f	e8 00 00 00 00	 call	 ?LineY@CGameLogic@@IAE_NPAPAHHHH@Z ; CGameLogic::LineY
  00064	84 c0		 test	 al, al
  00066	74 75		 je	 SHORT $LN5@OneCornerL
  00068	ff 75 1c	 push	 DWORD PTR _v2$[ebp+4]
  0006b	8b ce		 mov	 ecx, esi
  0006d	ff 75 10	 push	 DWORD PTR _v1$[ebp+4]
  00070	53		 push	 ebx
  00071	57		 push	 edi
  00072	e8 00 00 00 00	 call	 ?LineX@CGameLogic@@IAE_NPAPAHHHH@Z ; CGameLogic::LineX
  00077	84 c0		 test	 al, al
  00079	74 62		 je	 SHORT $LN5@OneCornerL

; 282  : 		{
; 283  : 			Vertex v = { v2.row, v1.col, BLANK };  

  0007b	8b 45 10	 mov	 eax, DWORD PTR _v1$[ebp+4]
  0007e	89 45 1c	 mov	 DWORD PTR _v$2[ebp+4], eax

; 142  : 	if(m_nVexNum <= PathLen)

  00081	8b 46 30	 mov	 eax, DWORD PTR [esi+48]

; 282  : 		{
; 283  : 			Vertex v = { v2.row, v1.col, BLANK };  

  00084	89 5d 18	 mov	 DWORD PTR _v$2[ebp], ebx

; 142  : 	if(m_nVexNum <= PathLen)

  00087	83 f8 04	 cmp	 eax, 4
  0008a	7f 48		 jg	 SHORT $LN16@OneCornerL

; 143  : 		m_avPath[m_nVexNum++] = v;

  0008c	c5 fa 7e 45 18	 vmovq	 xmm0, QWORD PTR _v$2[ebp]

; 284  : 			PushVertex(v);  
; 285  : 			return true;

  00091	eb 2e		 jmp	 SHORT $LN33@OneCornerL
$LN27@OneCornerL:

; 271  : 	{ 
; 272  : 		if (LineY(pGameMap, v1.row, v2.row, v2.col) && LineX(pGameMap, v1.row, v1.col, v2.col))

  00093	ff 75 1c	 push	 DWORD PTR _v2$[ebp+4]
  00096	8b ce		 mov	 ecx, esi
  00098	ff 75 10	 push	 DWORD PTR _v1$[ebp+4]
  0009b	ff 75 0c	 push	 DWORD PTR _v1$[ebp]
  0009e	57		 push	 edi
  0009f	e8 00 00 00 00	 call	 ?LineX@CGameLogic@@IAE_NPAPAHHHH@Z ; CGameLogic::LineX
  000a4	84 c0		 test	 al, al
  000a6	74 9e		 je	 SHORT $LN30@OneCornerL

; 273  : 		{
; 274  : 			Vertex v = { v1.row, v2.col, BLANK };   

  000a8	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  000ab	89 45 0c	 mov	 DWORD PTR _v$1[ebp], eax
  000ae	8b 45 1c	 mov	 eax, DWORD PTR _v2$[ebp+4]
  000b1	89 45 10	 mov	 DWORD PTR _v$1[ebp+4], eax

; 142  : 	if(m_nVexNum <= PathLen)

  000b4	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000b7	83 f8 04	 cmp	 eax, 4
  000ba	7f 18		 jg	 SHORT $LN16@OneCornerL

; 143  : 		m_avPath[m_nVexNum++] = v;

  000bc	c5 fa 7e 45 0c	 vmovq	 xmm0, QWORD PTR _v$1[ebp]
$LN33@OneCornerL:
  000c1	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000c4	c5 f9 d6 04 86	 vmovq	 QWORD PTR [esi+eax*4], xmm0
  000c9	c7 44 86 08 ff
	ff ff ff	 mov	 DWORD PTR [esi+eax*4+8], -1
  000d1	ff 46 30	 inc	 DWORD PTR [esi+48]
$LN16@OneCornerL:
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi

; 275  : 			PushVertex(v);   
; 276  : 			return true; 

  000d6	b0 01		 mov	 al, 1
  000d8	5b		 pop	 ebx

; 289  : }

  000d9	5d		 pop	 ebp
  000da	c2 1c 00	 ret	 28			; 0000001cH
$LN5@OneCornerL:
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi

; 286  : 		}
; 287  : 	}
; 288  : 	return false;

  000df	32 c0		 xor	 al, al
  000e1	5b		 pop	 ebx

; 289  : }

  000e2	5d		 pop	 ebp
  000e3	c2 1c 00	 ret	 28			; 0000001cH
?OneCornerLink@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z ENDP ; CGameLogic::OneCornerLink
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?LinkInCol@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z
_TEXT	SEGMENT
_pGameMap$ = 8						; size = 4
_v1$ = 12						; size = 12
_v2$ = 24						; size = 12
?LinkInCol@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z PROC	; CGameLogic::LinkInCol, COMDAT
; _this$ = ecx

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 201  : 	int nRow1 = v1.row;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _v1$[ebp]
  00006	8b c8		 mov	 ecx, eax

; 202  : 	int nRow2 = v2.row; 

  00008	8b 55 18	 mov	 edx, DWORD PTR _v2$[ebp]

; 203  : 	int nCol = v1.col; 
; 204  : 	//如果两元素处在边缘列，则可以直接消除，无需判断是否可以直通
; 205  : 	//if (nCol == 0 || nCol == CGameControl::s_nCols-1)
; 206  : 		//return true;
; 207  : 	//保证nRow1的值小于nRow2
; 208  : 	if (nRow1 > nRow2)

  0000b	3b c2		 cmp	 eax, edx
  0000d	7e 04		 jle	 SHORT $LN5@LinkInCol

; 209  : 	{ 
; 210  : 		int nTemp = nRow1;  
; 211  : 		nRow1 = nRow2;  

  0000f	8b ca		 mov	 ecx, edx

; 212  : 		nRow2 = nTemp; 

  00011	8b d0		 mov	 edx, eax
$LN5@LinkInCol:

; 213  : 	} 
; 214  : 	//直通  
; 215  : 	for(int i = nRow1+1; i <= nRow2; i++)

  00013	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	3b c2		 cmp	 eax, edx
  0001a	7f 16		 jg	 SHORT $LN11@LinkInCol
  0001c	8b 75 10	 mov	 esi, DWORD PTR _v1$[ebp+4]
  0001f	8b 7d 08	 mov	 edi, DWORD PTR _pGameMap$[ebp]
$LN15@LinkInCol:

; 216  : 	{   
; 217  : 		if(i == nRow2)  

  00022	74 16		 je	 SHORT $LN10@LinkInCol

; 219  : 		if(pGameMap[i][nCol] != BLANK)

  00024	8b 0c 87	 mov	 ecx, DWORD PTR [edi+eax*4]
  00027	83 3c b1 ff	 cmp	 DWORD PTR [ecx+esi*4], -1
  0002b	75 05		 jne	 SHORT $LN11@LinkInCol

; 213  : 	} 
; 214  : 	//直通  
; 215  : 	for(int i = nRow1+1; i <= nRow2; i++)

  0002d	40		 inc	 eax
  0002e	3b c2		 cmp	 eax, edx
  00030	7e f0		 jle	 SHORT $LN15@LinkInCol
$LN11@LinkInCol:
  00032	5f		 pop	 edi

; 220  : 			break;  
; 221  : 	} 
; 222  : 	return false;

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 223  : }

  00036	5d		 pop	 ebp
  00037	c2 1c 00	 ret	 28			; 0000001cH
$LN10@LinkInCol:
  0003a	5f		 pop	 edi

; 218  : 			return true;

  0003b	b0 01		 mov	 al, 1
  0003d	5e		 pop	 esi

; 223  : }

  0003e	5d		 pop	 ebp
  0003f	c2 1c 00	 ret	 28			; 0000001cH
?LinkInCol@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z ENDP	; CGameLogic::LinkInCol
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?LinkInRow@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z
_TEXT	SEGMENT
_pGameMap$ = 8						; size = 4
_v1$ = 12						; size = 12
_v2$ = 24						; size = 12
?LinkInRow@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z PROC	; CGameLogic::LinkInRow, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 172  : 	int nCol1 = v1.col; 

  00003	8b 45 10	 mov	 eax, DWORD PTR _v1$[ebp+4]
  00006	8b c8		 mov	 ecx, eax
  00008	56		 push	 esi

; 173  : 	int nCol2 = v2.col; 

  00009	8b 75 1c	 mov	 esi, DWORD PTR _v2$[ebp+4]

; 174  : 	int nRow = v1.row;
; 175  : 	//如果两元素处在边缘行，则可以直接消除，无需判断是否可以直通
; 176  : 	//if (nRow == 0 || nRow == CGameControl::s_nRows-1)
; 177  : 		//return true;
; 178  : 	//保证 nCol1 的值小于 nCol2 
; 179  : 	if(nCol1 > nCol2) 

  0000c	3b c6		 cmp	 eax, esi
  0000e	7e 04		 jle	 SHORT $LN5@LinkInRow

; 180  : 	{   //数据交换   
; 181  : 		int nTemp = nCol1;   
; 182  : 		nCol1 = nCol2;  

  00010	8b ce		 mov	 ecx, esi

; 183  : 		nCol2 = nTemp; 

  00012	8b f0		 mov	 esi, eax
$LN5@LinkInRow:

; 184  : 	} 
; 185  : 	 //直通   
; 186  : 	for(int i = nCol1 + 1; i <= nCol2; i++)  

  00014	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00017	3b c6		 cmp	 eax, esi
  00019	7f 18		 jg	 SHORT $LN11@LinkInRow

; 190  : 		if(pGameMap[nRow][i] != BLANK)  

  0001b	8b 55 08	 mov	 edx, DWORD PTR _pGameMap$[ebp]
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _v1$[ebp]
  00021	8d 14 8a	 lea	 edx, DWORD PTR [edx+ecx*4]
$LN15@LinkInRow:

; 187  : 	{  
; 188  : 		if(i == nCol2) 

  00024	74 14		 je	 SHORT $LN10@LinkInRow

; 190  : 		if(pGameMap[nRow][i] != BLANK)  

  00026	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00028	83 3c 81 ff	 cmp	 DWORD PTR [ecx+eax*4], -1
  0002c	75 05		 jne	 SHORT $LN11@LinkInRow

; 184  : 	} 
; 185  : 	 //直通   
; 186  : 	for(int i = nCol1 + 1; i <= nCol2; i++)  

  0002e	40		 inc	 eax
  0002f	3b c6		 cmp	 eax, esi
  00031	7e f1		 jle	 SHORT $LN15@LinkInRow
$LN11@LinkInRow:

; 191  : 			break;  
; 192  : 	}
; 193  : 	return false;

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 194  : }

  00036	5d		 pop	 ebp
  00037	c2 1c 00	 ret	 28			; 0000001cH
$LN10@LinkInRow:

; 189  : 			return true;  

  0003a	b0 01		 mov	 al, 1
  0003c	5e		 pop	 esi

; 194  : }

  0003d	5d		 pop	 ebp
  0003e	c2 1c 00	 ret	 28			; 0000001cH
?LinkInRow@CGameLogic@@IAE_NPAPAHUtagVertex@@1@Z ENDP	; CGameLogic::LinkInRow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  :         }

  00003	5d		 pop	 ebp

; 535  :             return _time64(_Time);

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___time64
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\study\数据结构与算法综合实验\连连看游戏\llkpro17.6.18\lianliankan\gamelogic.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
